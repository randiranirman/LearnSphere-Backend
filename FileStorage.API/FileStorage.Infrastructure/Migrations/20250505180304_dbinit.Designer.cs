// <auto-generated />
using System;
using FileStorage.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FileStorage.Infrastructure.Migrations
{
    [DbContext(typeof(FileStorageDbContext))]
    [Migration("20250505180304_dbinit")]
    partial class dbinit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FileStorage.Domain.Entities.MetirialEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SavedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectTopicId")
                        .HasColumnType("int");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<string>("UploadLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectTopicId");

                    b.ToTable("MetirialEntities");
                });

            modelBuilder.Entity("FileStorage.Domain.Entities.SubjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedTeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTeacherId");

                    b.ToTable("SubjectEntities");
                });

            modelBuilder.Entity("FileStorage.Domain.Entities.SubjectTopicEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectTopicEntities");
                });

            modelBuilder.Entity("FileStorage.Domain.Entities.TeacherEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("BirthDay")
                        .HasColumnType("date");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeacherEntities");
                });

            modelBuilder.Entity("FileStorage.Domain.Entities.MetirialEntity", b =>
                {
                    b.HasOne("FileStorage.Domain.Entities.SubjectTopicEntity", "SubjectTopic")
                        .WithMany("Metirials")
                        .HasForeignKey("SubjectTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectTopic");
                });

            modelBuilder.Entity("FileStorage.Domain.Entities.SubjectEntity", b =>
                {
                    b.HasOne("FileStorage.Domain.Entities.TeacherEntity", "AssignedTeacher")
                        .WithMany("Subjects")
                        .HasForeignKey("AssignedTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedTeacher");
                });

            modelBuilder.Entity("FileStorage.Domain.Entities.SubjectTopicEntity", b =>
                {
                    b.HasOne("FileStorage.Domain.Entities.SubjectEntity", "Subject")
                        .WithMany("SubjectTopics")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("FileStorage.Domain.Entities.SubjectEntity", b =>
                {
                    b.Navigation("SubjectTopics");
                });

            modelBuilder.Entity("FileStorage.Domain.Entities.SubjectTopicEntity", b =>
                {
                    b.Navigation("Metirials");
                });

            modelBuilder.Entity("FileStorage.Domain.Entities.TeacherEntity", b =>
                {
                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
